# How the Internet works

The goal of the Bootcamp is to transform you into a Web Developer that knows how to use modern Web Development practices, a tools that are highly popular and productive like TypeScript and React.

This course starts from zero, so I won't assume you know how the internet works.

But it‚Äôs not possible to call yourself a Web Developer if you don‚Äôt know how the Internet works. 

So, let me give you a quick overview, without getting too much into the details (going into details would take months on its own).

You and I have computers, smartphones, tablets, smart TVs, and even smartwatches

These are devices that can work on their own and do something. When you connect them to the internet, via a 5G/4G connection, a Wi-Fi network, or by plugging in an Ethernet cable, through wire, satellites or radio waves (or any other physical layer) you have access to the outside world.

Under the hood, when your device is connected to the internet, it's assigned an **IP address**. 

An IP address is composed of 4 sets of numbers, from 0 to 255. You can find this number in the network settings of your device.

For example, the IP address of my MacBook now is `192.168.1.135`. 

I can see it in my Network Settings.

![Screenshot-2025-01-13T04.36.02PM.png](How%20the%20Internet%20works%201902767ad7e381fdbb99d347a98a5e92/Screenshot-2025-01-13T04.36.02PM.png)

Addresses that start with `192.168.` are reserved for local networks. That's **your** local network. The number does not have a meaning, it was just chosen to mean ‚Äúlocal network‚Äù, along with other less common addresses. If you‚Äôre interested you can read more on [this RFC](https://datatracker.ietf.org/doc/html/rfc1918) (I‚Äôll later explain what is an RFC).

The local network is created by your Wi-Fi/Ethernet router. The router is the device that's connected to the internet provider. 

This is what happens: 

- the router connects to the internet provider and gets its own IP address.
- then the router creates the local network and assigns every device that connects to it a different local IP address. So every device in your house has a different IP address.

You can communicate between devices on your local network, but you cannot communicate with devices in *other* local networks, for example, the ones in your friend‚Äôs house, unless things are explicitly set up to allow this connection.

This is because there is a level of protection. 

In a local network, the IP address is *private*. 

Our devices can talk to the internet when they want, but the internet can't talk to your devices unless you want it to and set up systems to do so (and this is by design, so you don't have to spend the evening fighting hackers trying to set the room temperature of your smart thermostat for example, if not worse things). 

So, we can tell our devices to talk to something on the internet. Cool. But‚Ä¶ *who do we talk to?*

The answer is **applications running on** **other computers**. 

**Servers**, to give them a proper name.

A server is a computer whose job is to **serve us something**.

A server has an IP address, too. 

This time, the IP address is **public** because the server is created to be reached, unlike our home devices. The server has to be reachable all the time.

A server also has a human-readable name, which we call a **domain name**. 

*Other computers*, called DNS servers, have the job of mapping a domain name to an IP address. 

So instead of saying ‚Äúvisit `142.250.184.78`‚Äù we say ‚Äúvisit `google.com`‚Äù.

Humans work best with names, computers work best with numbers. DNS makes it all very easy for both.

- üëÄ¬†toggle for a longer DNS explanation
    
    You don't usually try to reach for a website using its IP address. You *can*, but it's very rare.
    
    You usually use a **domain name**. Like [google.com](http://google.com/), or [flaviocopes.com](http://flaviocopes.com/).
    
    This is very handy because for example I can change the server and company I use to host a website, while maintaining the same domain name.
    
    The system that maps domain names to IP addresses is called DNS: **Domain Name System**.
    
    DNS is a network of servers. Your provider will have its own DNS, your router already preconfigured to use it.
    
    You can also choose to use Google's DNS server, which has the IP address `8.8.8.8`.
    
    Those DNS servers will receive the requests from your computer, and in turn will ask their own reference DNS server.
    
    The system is organized like a tree. There is one DNS server at the top, called **root DNS server**.
    
    To simplify, it knows the IP address of the DNS servers that are managing each domain extension, like `com`, `net`, `org` and so on, including the country-specific domain extensions and the new ones like `blog`, `dev` or `tech`.
    
    Those DNS servers know the IP addresses mapping of all the domains under their extension.
    
    Of course the system is set up to ensure caching, redundancy and capacity to endure high concurrent requests, but this is the general idea.
    

The *language* that computers use to talk to each other is called a **protocol**. 

The protocol that powers the internet we all know is called **Internet Protocol Suite**, also known as **TCP/IP**. 

The IP protocol part is what I mentioned above; IP addresses and so on. That's the base layer that identifies how computers can find each other. 

On top of that layer, we have what we call **transport protocols**. 

They define how computers send packets of data to each other. 

**TCP**, also known as **Transmission Control Protocol**, is one of them. This protocol makes sure packets are delivered from the client to the server, and from the server to the client. 

We also have the **UDP** protocol, which is similar but different, but I'm getting too far into this explanation. 

I think we have the basics in place: **devices**, **IP addresses**, **and the TCP/IP protocol** that makes sure data can flow between computers. 

Let's now jump to see what the **Web** is and how it works.

